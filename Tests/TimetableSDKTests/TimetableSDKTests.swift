import XCTest
@testable import TimetableSDK

final class TimetableSDKTests: XCTestCase {

    func testDeepServerTraversal() {
        assertNoThrow {
            try fetchDivisions()
        }
    }

    private func fetchDivisions() throws {

        let divisions = try performRequest(DivisionsRequest())

        try divisions.forEach(fetchStudyLevels)
    }

    private func fetchStudyLevels(
        for division: DivisionListItem
    ) throws {

        log("""
            Fetching study levels for division:
            \(generateDeepDescription(division))
            """)

        guard let divisionAlias = division.alias else {
            XCTFail("Division alias is empty, skipping...")
            return
        }

        let request = StudyLevelRequest(divisionAlias: divisionAlias)
        let studyLevels = try performRequest(request)

        try studyLevels.forEach(fetchStudentGroups)
    }

    private func fetchStudentGroups(for studyLevel: StudyLevel) throws {

        log("""
            Fetching study programs for study level:
            \(generateDeepDescription(studyLevel))
            """)

        for program in studyLevel.programs {

            log("""
                Fetching admission years for study program:
                \(generateDeepDescription(program))
                """)

            for admissionYear in program.admissionYears {

                log("""
                    Fetching student groups for admission year:
                    \(generateDeepDescription(admissionYear))
                    """)


                guard let studyProgramID = admissionYear.studyProgramID else {
                    XCTFail("Study program ID is empty, skipping...")
                    continue
                }

                let studentGroupsRequest =
                    StudentGroupsRequest(studydyProgramID: studyProgramID)

                let studentGroupList = try performRequest(studentGroupsRequest)
                try studentGroupList.studentGroups.forEach(fetchEvents)
            }
        }
    }

    private func fetchEvents(for studentGroup: StudentGroup) throws {

        log("""
            Fetching current week events for student group:
            \(generateDeepDescription(studentGroup))
            """)

        guard let studentGroupID = studentGroup.id else {
            XCTFail("Student group ID is empty, skipping...")
            return
        }

        let eventsRequest =
            StudentGroupEventsRequest(studentGroupID: studentGroupID,
                                      timeInterval: .currentWeek)

        _ = try performRequest(eventsRequest)
    }

    func testFetchEducators() {

        guard #available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *) else {
            return
        }

        assertNoThrow {

            // Emoji query allows to fetch all the educators.
            let result =
                try performRequest(SearchEducatorRequest(searchQuery: "üòÄ"))

            log("\(result.educators.count) educators fetched.")

            XCTAssertGreaterThan(result.educators.count, 0)

            for educator in result.educators {
                XCTAssertNotNil(educator.name?.givenName)
                XCTAssertNotNil(educator.name?.familyName)
            }
        }
    }

    func testFetchAddressesWithClassrooms() {
        assertNoThrow {

            let addresses = try performRequest(AddressesRequest())

            log("\(addresses.count) addresses fetched.")

            XCTAssertGreaterThan(addresses.count, 0)

            for address in addresses {
                XCTAssertNotNil(address.id)
                XCTAssertNotNil(address.name)

                try fetchClassroms(for: address)
            }
        }
    }

    private func fetchClassroms(for address: Address) throws {

        guard let addressID = address.id else {
            XCTFail("Address ID is empty, skipping...")
            return
        }

        let request = ClassroomsRequest(addressID: addressID)
        let classrooms = try performRequest(request)

        log("""
            \(classrooms.count) classrooms fetched for \
            \(address.name ?? "<nil>").
            """)

        XCTAssertGreaterThan(classrooms.count, 0)

        for classroom in classrooms {
            XCTAssertNotNil(classroom.id)
            XCTAssertNotNil(classroom.name)
        }
    }

    func testParsePersonNameComponents() {

        guard #available(macOS 10.11, iOS 9.0, tvOS 9.0, watchOS 2.0, *) else {
            return
        }

        let names: [(short: String, full: String)] = [
            ("–†–µ–¥–∏–Ω–∞-–¢–æ–º–∞—Å –ú. –ê.", "–†–µ–¥–∏–Ω–∞-–¢–æ–º–∞—Å –ú–∞—Ä–∏–Ω–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞"),
            ("–ê–±–±–∞—Å–æ–≤ –ú. –≠.", "–ê–±–±–∞—Å–æ–≤ –ú–µ–¥–∂–∏–¥ –≠–ª—å—Ö–∞–Ω –æ–≥–ª—ã"),
            ("–†–∞–π—Ç–º–∞–Ω–Ω –§.", "–†–∞–π—Ç–º–∞–Ω–Ω –§–æ–ª—å–∫–µ—Ä"),
            ("–ê–π–µ–ª–µ –ú.", "–ê–π–µ–ª–µ –ú–µ–¥—Ö–∏–Ω –¢–µ—Ñ–µ—Ä–∏"),
            ("–ê–≤–∏–ª–∞ –†–µ–µ—Å–µ –¢. –ê.", "–ê–≤–∏–ª–∞ –†–µ–µ—Å–µ –¢–∞—Ç—å—è–Ω–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞"),
            ("–°–º–∏—Ç –î–∂. –ü.", "–°–º–∏—Ç –î–∂–æ–Ω –ü–æ–ª"),
            ("–ê–Ω—Ç–æ–Ω–æ–≤ –§. –§.", "–ê–Ω—Ç–æ–Ω–æ–≤ –§–µ–¥–æ—Ç –§–æ–Ω –§—ë–¥–æ—Ä–æ–≤–∏—á")
        ]

        let expectedPNCs: [PersonNameComponents] = [
            .init(firstName: "–ú–∞—Ä–∏–Ω–∞",
                  middleName: "–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞",
                  lastName: "–†–µ–¥–∏–Ω–∞-–¢–æ–º–∞—Å"),
            .init(firstName: "–ú–µ–¥–∂–∏–¥",
                  middleName: "–≠–ª—å—Ö–∞–Ω –æ–≥–ª—ã",
                  lastName: "–ê–±–±–∞—Å–æ–≤"),
            .init(firstName: "–§–æ–ª—å–∫–µ—Ä",
                  middleName: nil,
                  lastName: "–†–∞–π—Ç–º–∞–Ω–Ω"),
            .init(firstName: "–ú–µ–¥—Ö–∏–Ω –¢–µ—Ñ–µ—Ä–∏",
                  middleName: nil,
                  lastName: "–ê–π–µ–ª–µ"),
            .init(firstName: "–¢–∞—Ç—å—è–Ω–∞",
                  middleName: "–ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞",
                  lastName: "–ê–≤–∏–ª–∞ –†–µ–µ—Å–µ"),
            .init(firstName: "–î–∂–æ–Ω",
                  middleName: "–ü–æ–ª",
                  lastName: "–°–º–∏—Ç"),
            .init(firstName: "–§–µ–¥–æ—Ç",
                  middleName: "–§–æ–Ω –§—ë–¥–æ—Ä–æ–≤–∏—á",
                  lastName: "–ê–Ω—Ç–æ–Ω–æ–≤")
        ]

        for (name, expectation) in zip(names, expectedPNCs) {

            let pnc = PersonNameComponents
                .personNameComponents(fromFullName: name.full,
                                      shortName: name.short)

            XCTAssertEqual(pnc, expectation)
        }
    }

    static var allTests = [
        ("testDeepServerTraversal", testDeepServerTraversal),
        ("testFetchEducators", testFetchEducators),
        ("testParsePersonNameComponents", testParsePersonNameComponents)
    ]
}
